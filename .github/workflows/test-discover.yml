name: OVS Layer 2 Switch CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  run-tests:
    name: Run OVS Tests on multiple OSs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os-image:
          - centos-9-stream
          - ubuntu-24.04
          - fedora-39
    env:
      SSH_PORT: $((2220 + RANDOM % 100))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set IMAGE_URL based on OS
        run: |
          case "${{ matrix.os-image }}" in
            "centos-9-stream")
              echo "IMAGE_URL=https://cloud.centos.org/centos/9-stream/x86_64/images/CentOS-Stream-GenericCloud-9-latest.x86_64.qcow2" >> $GITHUB_ENV
              ;;
            "ubuntu-24.04")
              echo "IMAGE_URL=https://cloud-images.ubuntu.com/releases/24.04/release/ubuntu-24.04-server-cloudimg-amd64.img" >> $GITHUB_ENV
              ;;
            "fedora-39")
              # Use latest Fedora 39 cloud image to avoid 404
              echo "IMAGE_URL=https://download.fedoraproject.org/pub/fedora/linux/releases/39/Cloud/x86_64/images/Fedora-Cloud-Base-Latest.x86_64.qcow2" >> $GITHUB_ENV
              ;;
          esac

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y qemu-utils curl

      - name: Ensure vm-images and logs directories exist
        run: mkdir -p vm-images logs

      - name: Download and prepare VM
        run: |
          IMAGE_FILE="vm-images/$(basename $IMAGE_URL)"
          WORK_IMAGE="vm-images/test-${{ matrix.os-image }}-$(date +%s).qcow2"

          if [[ ! -f "$IMAGE_FILE" ]]; then
            echo "Downloading VM image for ${{ matrix.os-image }}..."
            curl -L --fail -o "$IMAGE_FILE" "$IMAGE_URL"
          else
            echo "Using cached image: $IMAGE_FILE"
          fi

          echo "Verifying image..."
          qemu-img info "$IMAGE_FILE" || { echo "❌ Invalid image file"; exit 1; }

          cp "$IMAGE_FILE" "$WORK_IMAGE"
          qemu-img resize "$WORK_IMAGE" 10G

          echo "VM_IMAGE=$WORK_IMAGE" >> $GITHUB_ENV

      - name: Sanitize shell scripts
        run: |
          find scripts tests -type f -name "*.sh" -exec sed -i 's/[“”]/"/g' {} +
          find scripts tests -type f -name "*.sh" -exec sed -i "s/[‘’]/'/g" {} +
          find scripts tests -type f -name "*.sh" -exec sed -i 's/[^\x00-\x7F]/ /g' {} +

      - name: Run discovery and switch tests
        run: |
          set -e
          LOG_FILE=logs/test-${{ matrix.os-image }}.log
          sudo bash ./tests/test-discover-harness.sh > "$LOG_FILE" 2>&1

      - name: Upload test log artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ matrix.os-image }}
          path: logs/test-${{ matrix.os-image }}.log