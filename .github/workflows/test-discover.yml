name: Test Production Discover Interfaces Script

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-discover-script:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Ubuntu-22.04-Host"
            type: "host"
            setup_cmd: "sudo apt-get update && sudo apt-get install -y openvswitch-switch"
          - name: "Ubuntu-22.04-VM"
            type: "vm"
            image_url: "https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img"
            username: "ubuntu"
            setup_cmd: "sudo apt-get update && sudo apt-get install -y openvswitch-switch"
          - name: "Fedora-39-VM"
            type: "vm"
            image_url: "https://download.fedoraproject.org/pub/fedora/linux/releases/39/Cloud/x86_64/images/Fedora-Cloud-Base-Generic.x86_64-39-1.5.qcow2"
            username: "fedora"
            setup_cmd: "sudo dnf install -y openvswitch"
          - name: "Rocky-9-VM"
            type: "vm"
            image_url: "https://dl.rockylinux.org/pub/rocky/9/images/x86_64/Rocky-9-GenericCloud.latest.x86_64.qcow2"
            username: "rocky"
            setup_cmd: "sudo dnf install -y epel-release && sudo dnf install -y openvswitch"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Host Dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y \
            qemu-system-x86 qemu-utils cloud-image-utils \
            sshpass wget genisoimage netcat-openbsd

      - name: Setup Test Environment
        run: |
          mkdir -p logs vm-images
          if [[ ! -f "scripts/discover-interfaces.sh" ]]; then
            echo "❌ ERROR: scripts/discover-interfaces.sh not found!"
            echo "Available files:"
            find . -name "*.sh" -type f
            exit 1
          fi
          echo "✅ Found production script:"
          ls -la scripts/discover-interfaces.sh
          echo "Script size: $(wc -l < scripts/discover-interfaces.sh) lines"

      - name: Test on Ubuntu Host
        if: matrix.type == 'host'
        run: |
          echo "=== Testing Production Script on Ubuntu Host ==="
          echo "System: $(lsb_release -ds)"
          echo "Kernel: $(uname -r)"
          echo "User: $(whoami) (UID: $EUID)"
          if [[ -n "${{ matrix.setup_cmd }}" ]]; then
            echo "Installing dependencies..."
            ${{ matrix.setup_cmd }}
          fi
          echo "=== Initial Network State ==="
          ip -br link show
          echo "Total interfaces: $(ip -br link show | wc -l)"
          # Create dummy interfaces
          sudo modprobe dummy numdummies=3 || true
          for i in {0..2}; do
            sudo ip link add test-dummy$i type dummy 2>/dev/null || true
            sudo ip link set test-dummy$i up
          done
          sudo ip link add test-br0 type bridge 2>/dev/null || true
          ip -br link show
          LOG_FILE="logs/${{ matrix.name }}.log"
          sudo -E TEST_MODE=true FORCE=true MANAGEMENT_INTERFACE=eth0 \
            bash scripts/discover-interfaces.sh 2>&1 | tee "$LOG_FILE"
          SCRIPT_EXIT_CODE=${PIPESTATUS[0]}
          # Check for config file
          if [[ -f /etc/ovs/interface-config.conf ]]; then
            echo "✅ Configuration file created successfully"
            source /etc/ovs/interface-config.conf
            echo "Management Interface: $MANAGEMENT_INTERFACE"
            echo "Switch Interfaces: ${SWITCH_INTERFACES[*]}"
            echo "Bridge Name: $BRIDGE_NAME"
            echo "Total Interfaces: $TOTAL_INTERFACES"
          else
            echo "❌ No configuration file created"
            SCRIPT_EXIT_CODE=1
          fi
          # Cleanup dummy interfaces
          for i in {0..2}; do
            sudo ip link delete test-dummy$i 2>/dev/null || true
          done
          sudo ip link delete test-br0 2>/dev/null || true
          exit $SCRIPT_EXIT_CODE

      - name: Download and Prepare VM Image
        if: matrix.type == 'vm'
        run: |
          IMAGE_FILE="vm-images/$(basename '${{ matrix.image_url }}')"
          WORK_IMAGE="vm-images/test-${{ matrix.name }}.qcow2"
          if [[ ! -f "$IMAGE_FILE" ]]; then
            wget -q --show-progress -O "$IMAGE_FILE" "${{ matrix.image_url }}"
          fi
          cp "$IMAGE_FILE" "$WORK_IMAGE"
          qemu-img resize "$WORK_IMAGE" 10G
          echo "VM_IMAGE=$WORK_IMAGE" >> $GITHUB_ENV
          echo "SSH_PORT=$((2220 + RANDOM % 100))" >> $GITHUB_ENV

      # Remaining VM setup steps (cloud-init, SSH, run script, cleanup)
      # Can follow the same formatting, removing backticks and ensuring correct indentation

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.name }}
          path: |
            logs/
          retention-days: 7

  generate-summary:
    needs: test-discover-script
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download All Test Results
        uses: actions/download-artifact@v4
        with:
          path: all-results

      - name: Generate Summary Report
        run: |
          echo "# Production discover-interfaces.sh Test Results" > SUMMARY.md
          echo "**Test Date:** $(date)" >> SUMMARY.md
          echo "**Repository:** $GITHUB_REPOSITORY" >> SUMMARY.md
          echo "**Commit:** $GITHUB_SHA" >> SUMMARY.md
          echo "## Test Results by Platform" >> SUMMARY.md
          SUCCESS_COUNT=0
          TOTAL_COUNT=0
          for result_dir in all-results/test-results-*/; do
            [[ -d "$result_dir" ]] || continue
            TOTAL_COUNT=$((TOTAL_COUNT + 1))
            PLATFORM_NAME=$(basename "$result_dir" | sed 's/test-results-//')
            REPORT="$result_dir/report-$PLATFORM_NAME.md"
            if [[ -f "$REPORT" ]]; then
              cat "$REPORT" >> SUMMARY.md
              if grep -q "SUCCESS" "$REPORT"; then
                SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              fi
            else
              echo "### $PLATFORM_NAME" >> SUMMARY.md
              echo "**Status: ❌ NO REPORT GENERATED**" >> SUMMARY.md
            fi
          done
          echo "## Summary" >> SUMMARY.md
          echo "**Overall Success Rate:** $SUCCESS_COUNT/$TOTAL_COUNT platforms" >> SUMMARY.md
          echo "=== SUMMARY REPORT ==="
          cat SUMMARY.md

      - name: Upload Summary Report
        uses: actions/upload-artifact@v4
        with:
          name: test-summary-report
          path: SUMMARY.md